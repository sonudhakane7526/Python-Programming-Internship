# -*- coding: utf-8 -*-
"""Task-3) Linear_Regression_with_Scikit-learn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8-l8pqGoQ8mKasKeTfyG3Dp7c3K712s
"""

# Importing Required Libraries for Performing Linear Regression
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

import pandas as pd
import numpy as np

# Load Boston housing dataset from the original source
data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)

# Combine data and target variables
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)

# Initialize linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on training and test sets
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Calculate mean squared error (MSE) on training and test sets
train_mse = mean_squared_error(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
print("Train MSE:", train_mse)
print("Test MSE:", test_mse)

# Plot residuals
train_residuals = y_train - y_train_pred
test_residuals = y_test - y_test_pred

plt.figure(figsize=(10, 6))
plt.scatter(y_train_pred, train_residuals, label='Training data', color='blue', alpha=0.5)
plt.scatter(y_test_pred, test_residuals, label='Test data', color='red', alpha=0.5)
plt.xlabel('Predicted values')
plt.ylabel('Residuals')
plt.axhline(y=0, color='black', linestyle='--')
plt.title('Residuals Plot')
plt.legend()
plt.show()
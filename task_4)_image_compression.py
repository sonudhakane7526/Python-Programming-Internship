# -*- coding: utf-8 -*-
"""Task-4) Image_Compression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8-l8pqGoQ8mKasKeTfyG3Dp7c3K712s
"""

import numpy as np
from PIL import Image
import os

# RLE Compression and Decompression Functions
def rle_compress(image_array):
    compressed_data = []
    for row in image_array:
        compressed_row = []
        current_pixel = row[0]
        count = 1
        for pixel in row[1:]:
            if pixel == current_pixel:
                count += 1
            else:
                compressed_row.append((current_pixel, count))
                current_pixel = pixel
                count = 1
        compressed_row.append((current_pixel, count))
        compressed_data.append(compressed_row)
    return compressed_data

def rle_decompress(compressed_data):
    decompressed_data = []
    for row in compressed_data:
        decompressed_row = []
        for pixel, count in row:
            decompressed_row.extend([pixel] * count)
        decompressed_data.append(decompressed_row)
    return np.array(decompressed_data)

# DCT Compression and Decompression Functions
def dct_compress(image_array, quality=75):
    im = Image.fromarray(image_array)
    # Convert image to JPEG format with specified quality
    im.save('temp.jpg', quality=quality, subsampling=0)
    # Load compressed image and convert back to array
    compressed_im = Image.open('temp.jpg')
    compressed_data = np.array(compressed_im)
    os.remove('temp.jpg')
    return compressed_data

def dct_decompress(compressed_data):
    return compressed_data

# Image Format Handling
def open_image(file_path):
    return np.array(Image.open(file_path))

def save_image(image_array, output_path, format):
    im = Image.fromarray(image_array)
    im.save(output_path, format=format)

# Main Compression Function
def compress_image(image_path, output_path, method='DCT', quality=75):
    # Open image
    image_array = open_image(image_path)

    # Compress image using specified method
    if method == 'RLE':
        compressed_data = rle_compress(image_array)
    elif method == 'DCT':
        compressed_data = dct_compress(image_array, quality)
    else:
        raise ValueError("Invalid compression method.")

    # Save compressed image
    save_image(compressed_data, output_path, format='JPEG')

# Test with diverse images
def test_tool():
    # Test tool with various images and compression settings
    pass

# Entry point (CLI)
if __name__ == "__main__":
    image_path = input("Enter the path to the input image: ")
    output_path = input("Enter the path for the output compressed image: ")
    method = input("Enter the compression method (RLE or DCT): ")
    quality = int(input("Enter the compression quality (0-100, applicable for DCT only): "))

    compress_image(image_path, output_path, method=method.upper(), quality=quality)
    print("Image compression completed.")